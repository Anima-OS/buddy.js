#!/usr/bin/env node

var sep       = require('path').sep;
var fs        = require('fs');
var file      = require('file');
var program   = require('commander');
var Detector  = require('../lib/detector');
var reporters = require('../lib/reporters');

program
  .version('0.0.1')
  .usage('[options] <files ...>')
  .option('-i, --ignore <numbers>', 'list numbers to ignore (default: 0,1)')
  .option('-I, --disable-ignore', 'disables the ignore list')
  .option('-r, --reporter [simple|detailed|json]',
    'specify the reporter to use (default: simple)')
  .option('-c, --color', 'enables color in console output')
  .parse(process.argv);

// Assume all unconsumed arguments are paths
var suppliedPaths = program.args || [];
if (!suppliedPaths.length) {
  console.log('Please provide a list of filenames or directories');
  process.exit(0);
}

// Iterate over the given paths, and recurse if they're directories
var paths = [];
suppliedPaths.forEach(function(path) {
  if (fs.statSync(path).isFile()) {
    return paths.push(path);
  }

  var dirContents = file.walkSync(path, function(dirPath, dirs, files) {
    files.forEach(function(file) {
      paths.push(dirPath + sep + file);
    });
  });
});

// Get the list of numbers to ignore
var ignore = [];
if (!program.disableIgnore) {
  ignore = program.ignore || [0, 1];
}

// Retrieve the requested reporter, defaulting to simple
var reporterType;
if (program.reporter in reporters) {
  reporterType = reporters[program.reporter];
} else {
  reporterType = reporters.simple;
}

var detector = new Detector(paths);
var reporter = new reporterType(detector, ignore, program.color);

detector.run().then(function() {
  process.exit(0);
}).catch(function(err) {
  console.log(err);
  process.exit(1);
});
